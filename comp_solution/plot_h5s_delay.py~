import os
import numpy as np
import matplotlib.pyplot as plt
from losoto.h5parm import h5parm

### Loading data
# cf the a for only the common stations
form="pdf"

# h5 close to aips
name_ha="/data020/scratch/lb_bw/test_losoto_delay_calibration/16sec_1SB_2comp_uvcutCS/ILTJ1327_16sec_1SB_2comp_uvcutCS_globaldb.h5"
f_ha = h5parm(name_ha ,readonly=True)
tectab_a = f_ha.getSoltab('sol000','tec000')
clocktab_a = f_ha.getSoltab('sol000','clock000')
if len(tectab_a.time[:])!=len(clocktab_a.time[:]):
    print "WARNING: The TEC and the CLOCK table don't have the same number of times points (might lead to wrong computation)"

# previous h5
name_h5="/data020/scratch/lb_bw/test_losoto_delay_calibration/noCS_circular/ILTJ1327_noCS_globaldb.h5"
f_h5 = h5parm(name_h5 ,readonly=True)
tectab_5 = f_h5.getSoltab('sol000','tec000')
clocktab_5 = f_h5.getSoltab('sol000','clock000')
if len(tectab_5.time[:])!=len(clocktab_5.time[:]):
    print "WARNING: The TEC and the CLOCK table don't have the same number of times points (might lead to wrong computation)"


#~ freq=129685974.12 ###MHz taking a central freq just for the conversion of tec to sec
#~ scal=59.*pow((150000000./freq),2)


n_ant=-1
for ant in tectab_a.ant[:]:
    n_pol=-1
    n_ant=n_ant+1
    print tectab_a.ant[n_ant]
    sinh5=False
    if ant in tectab_5.ant[:]:
        sinh5=True
        n_ant_5=np.where(tectab_5.ant[:]==ant)[0][0]### very ugly and quick solution to match the station
        ### [TODO: somehow combine the core station into one plot to see them all - otherwise only from one file -no same name]
    
    
    print ant
    fig = plt.figure()
    fig.suptitle(ant) ### NB: title n existe pas pr fig
    
    for pol in tectab_a.pol[:]:
        n_pol=n_pol+1
       
        if n_pol==0:
            ax_tecxx = fig.add_subplot(221)
            plt.ylabel('TEC ($10^{16} \cdot \mathrm{m}^{-2}$)')
            plt.setp(ax_tecxx.get_xticklabels(), visible=False)
            
        else:
            ax_tecyy = fig.add_subplot(222,sharey=ax_tecxx)
            plt.setp(ax_tecyy.get_yticklabels(), visible=False)
            plt.setp(ax_tecyy.get_xticklabels(), visible=False)### TODO: essayer de combiner ds une commande
            
        ### Assuming all 0 value are Nan...
        if not all(vl==0 for vl in tectab_a.val[:,n_ant,n_pol]): ### just to not erase completely the reference antenna
            plt.plot(clocktab_a.time[:]-clocktab_a.time[0],np.where(tectab_a.val[:,n_ant,n_pol]!=0,tectab_a.val[:,n_ant,n_pol],float('Nan')), label="H5 previous")
        else:
            plt.plot(clocktab_a.time[:]-clocktab_a.time[0],tectab_a.val[:,n_ant,n_pol])### assuming a file has always the same colors , label="H5 previous")
        
        if sinh5:
            if not all(vl==0 for vl in tectab_5.val[:,n_ant_5,n_pol]):
                plt.plot(clocktab_a.time[:]-clocktab_a.time[0],np.where(tectab_5.val[:,n_ant_5,n_pol]!=0,tectab_5.val[:,n_ant_5,n_pol],float('NaN')), label="H5 close to AIPS")
            else:
                plt.plot(clocktab_a.time[:]-clocktab_a.time[0],tectab_5.val[:,n_ant_5,n_pol])###, label="H5 close to AIPS")
        plt.title(pol)
        
        
        
        if n_pol==0:
            ax_clockxx = fig.add_subplot(223,sharex=ax_tecxx)
            plt.ylabel('Clock (ns)')
        else:
            ax_clockyy = fig.add_subplot(224,sharex=ax_tecxx,sharey=ax_clockxx)### NB: faut q st ac xx ds tt les cas car pr yy tecyy pas encore acquis
            plt.setp(ax_clockyy.get_yticklabels(), visible=False)
        
        
        if not all(vl==0 for vl in clocktab_a.val[:,n_ant,n_pol]): ### just to not erase completely the reference antenna
            if n_pol==1:
                plt.plot(clocktab_a.time[:]-clocktab_a.time[0],np.where(clocktab_a.val[:,n_ant,n_pol]!=0,clocktab_a.val[:,n_ant,n_pol]*1.e9,float('Nan')), label="H5 previous")
            else:
                plt.plot(clocktab_a.time[:]-clocktab_a.time[0],np.where(clocktab_a.val[:,n_ant,n_pol]!=0,clocktab_a.val[:,n_ant,n_pol]*1.e9,float('Nan')))###, label="H5 previous")
        else:
            if n_pol==1:
                plt.plot(clocktab_a.time[:]-clocktab_a.time[0],clocktab_a.val[:,n_ant,n_pol]*1.e9, label="H5 previous")
            else:
                plt.plot(clocktab_a.time[:]-clocktab_a.time[0],clocktab_a.val[:,n_ant,n_pol]*1.e9)###, label="H5 previous")
                
        if sinh5:
            if not all(vl==0 for vl in clocktab_5.val[:,n_ant_5,n_pol]):
                if n_pol==1:
                    plt.plot(clocktab_a.time[:]-clocktab_a.time[0],np.where(clocktab_5.val[:,n_ant_5,n_pol]!=0,clocktab_5.val[:,n_ant_5,n_pol]*1.e9,float('NaN')), label="H5 close to AIPS")
                else:
                    plt.plot(clocktab_a.time[:]-clocktab_a.time[0],np.where(clocktab_5.val[:,n_ant_5,n_pol]!=0,clocktab_5.val[:,n_ant_5,n_pol]*1.e9,float('NaN')))###, label="H5 close to AIPS")
            else:
                if n_pol==1:
                    plt.plot(clocktab_a.time[:]-clocktab_a.time[0],clocktab_5.val[:,n_ant_5,n_pol]*1.e9, label="H5 close to AIPS")
                else:
                    plt.plot(clocktab_a.time[:]-clocktab_a.time[0],clocktab_5.val[:,n_ant_5,n_pol]*1.e9)###, label="H5 close to AIPS")
        #~ plt.title(pol)
        plt.xlabel('Time (s)')
        
        
        #~ plt.plot(clocktab_a.time[:],tectab_a.val[:,n_ant,n_pol])
        plt.legend()
        
        #~ if sinh5:
            #~ plt.plot(clocktab_5.time[:],tectab_5.val[:,n_ant_5,n_pol])
        
        
        #plt.title('Polarisation '+pol+' for ' + ant)
        #plt.xlabel('Time')
        #plt.ylabel('Delay (ns)')
        #plt.plot(clocktab_a.time[:],scal*tectab_a.val[:,n_ant,n_pol]+1e9*clocktab_a.val[:,n_ant,n_pol], label="H5 previous")
        #if sinh5:
            #plt.plot(clocktab_5.time[:],scal*tectab_5.val[:,n_ant_5,n_pol]+1e9*clocktab_5.val[:,n_ant_5,n_pol], label="H5 close to AIPS")
    
    
       
    plt.savefig('station-' + ant +'.'+form, bbox_inches = 'tight', format = form)
    plt.clf()


#### Sort of the pdfs
output_pdf_name="clocktec_h5s."+form
make_pdf = "gs -sDEVICE=pdfwrite -dCompatibilityLevel=1.4 -dPDFSETTINGS=/default -dNOPAUSE -dQUIET -dBATCH -dDetectDuplicateImages -dCompressFonts=true -r150 -sOutputFile="+output_pdf_name
pdfs = []
for ant in tectab_a.ant[:]:
    for pol in tectab_a.pol[:]:
        pdf_i='station-' + ant +'.'+form
        #pdfs.append(pdf_i)
        make_pdf=make_pdf+" "+pdf_i+" "
os.system(make_pdf)
for pdf in pdfs:
    os.remove(pdf)

transfer = "curl --upload-file ./"+output_pdf_name+" https://transfer.sh/"+output_pdf_name
os.system(transfer)
print

        
#print scal*tectab_a.val[:,1,1]+1e9*clocktab_a.val[:,1,1]
#casa
#w, x, y, z = np.loadtxt('delay.txt', delimiter=' ', usecols = (0, 1, 2, 3), unpack = True)

##aips
#f, t, a, p1, p2 = np.genfromtxt('sn.txt', usecols = (0, 1, 3, 4, 5), dtype = str, unpack = True)

#frequency = []
#time = []
#antenna = []
#pol1 = []
#pol2 = []

#for i in range(len(t)):
    #frequency.append(float(f[i]))
    #time.append(float(t[i]))
    #antenna.append(a[i])
    #pol1.append(float(p1[i]))
    #pol2.append(float(p2[i]))


##h5
#name_h5="/data020/scratch/lb_bw/test_losoto_delay_calibration/16sec_1SB_2comp_uvcutCS/ILTJ1327_16sec_1SB_2comp_uvcutCS_globaldb.h5"
##"/data020/scratch/carosko/ccha/data/ILTJ1327_16sec_1chan_testsky.h5"
#f_h5 = h5parm(name_h5 ,readonly=True)
#tectab = f_h5.getSoltab('sol000','tec000')
#clocktab = f_h5.getSoltab('sol000','clock000')
    #####/!\ ignoring weight
#freq=129685974.12 ###MHz taking a central freq just for the conversion of tec to sec
##scal=59.*pow((150000000./freq),2)*1000000000.
#scal=59.*pow((150000000./freq),2)

#if not(tectab.time[:]==clocktab.time[:]).all():
     #### just to make sure the time steps are the same between the different tables
     #### But no break; just information of the user from now on
    #print " /!\!!!!!!!!!!!!!!!!!!!! the time steps are not the same between the tec and the clock tables"
    
#nbr_tps=len(tectab.time[:])
#min_tps=min(tectab.time[:])
#pol=0### 1st polarisation
##times steps:
#time_h5=range(nbr_tps)
##time in sec:
##for i in range(0,nbr_tps):
    ##time_h5.append(tectab.time[i]-min_tps)





#### A spot of house keeping
#stations = ['RS106', 'RS205', 'RS208', 'RS210', 'RS305', 'RS306', 'RS307', 'RS310', 'RS406', 'RS407', 'RS409', 'RS503', 'RS508', 'RS509', 'DE601', 'DE602', 'DE603', 'DE604', 'DE605', 'FR606', 'SE607', 'UK608', 'ST001']

#pdfs = []
##merged = PdfFileMerger()
#count = 0
#time_axis119 = [] #range(119)
#time_axis89 = []

#for i in range(89):
    ##time_axis89.append(i * 1.337)
    #time_axis89.append(i * nbr_tps/89.)
#for i in range(119):
    ##time_axis89.append(i * 1.337)
    #time_axis119.append(i * nbr_tps/119.)    
    
    
#### Make the plot
#for s in stations:

    #''' CASA --------------------------------------------------------------------------------------------------- '''

    #casa_data_time = []
    #casa_data_pol1 = []
    #casa_data_pol2 = []

    #for j in range(len(x)):
        #if int(x[j]) == count:
            #casa_data_time.append(w[j])
            #casa_data_pol1.append(y[j])
            #casa_data_pol2.append(z[j])

    #count = count + 1

    #for i in range(len(casa_data_pol1)):
        #if casa_data_pol1[i] > 350 or casa_data_pol1[i] < -350:
            #casa_data_pol1[i] = casa_data_pol1[i - 1]
            
    #''' AIPS --------------------------------------------------------------------------------------------------- '''

    #station_time = []
    #station_pol1 = []
    #station_pol2 = []
    #station = s

    #for i in range(len(time)):
        #if frequency[i] == 129685974.12 and antenna[i] == station:
            #station_time.append(time[i])
            #station_pol1.append(pol1[i] * 1e9)

    #for i in range(len(station_pol1)):
        #if station_pol1[i] > 350 or station_pol1[i] < -200:
            #station_pol1[i] = station_pol1[i - 1]
            
    #''' LOSOTO ------------------------------------------------------------------------------------------------- '''

    #delaytab=[]
    #sinh5=False
    #if (s+"HBA") in tectab.ant[:]:
        #sinh5=True
        #ant=np.where(tectab.ant[:]==s+"HBA")[0][0]### very ugly and quick solution to match the station
        
        #cm=tm=0
        #for i in range(0,nbr_tps):
            
            #c=1e9*clocktab.val[i,ant,pol]
            #t=scal*tectab.val[i,ant,pol]
            
            #### cliiping the 0 nan:
            #if (c==0 and i<nbr_tps-1):
                #if cm!=0:
                    #m=1
                    #while (clocktab.val[i+m,ant,pol]==0 and i+m<nbr_tps-1):
                        #m=m+1
                    #c=(cm+1e9*clocktab.val[i+m,ant,pol])/2
            #if (t==0 and i<nbr_tps-1):
                #if tm!=0:
                    #m=1
                    #while (tectab.val[i+m,ant,pol]==0 and i+m<nbr_tps-1):
                        #m=m+1
                    #t=(tm+scal*tectab.val[i+m,ant,pol])/2
            
            #delaytab.append(c+t)
            #cm=c
            #tm=t
    
    #''' Plot --------------------------------------------------------------------------------------------------- '''

    #plt.figure(figsize = (10, 8))
    #plt.title('Polarisation 1 for ' + station)
    #plt.xlabel('Time')
    #plt.ylabel('Delay (ns)')

    #plt.plot(time_axis89, casa_data_pol1, color = 'red', label = 'CASA')    
    #plt.plot(time_axis119, station_pol1, label = 'AIPS')
    #if sinh5:
        #plt.plot(time_h5, delaytab, label = 'Losoto')
    
    #plt.legend()
    #plt.savefig('station-' + s + '.pdf', bbox_inches = 'tight', format = 'pdf')
    #pdfs.append('station-' + s + '.pdf')
    #plt.clf()


#### Sort of the pdfs
#output_pdf_name="delay_a.pdf"
#make_pdf = "gs -sDEVICE=pdfwrite -dCompatibilityLevel=1.4 -dPDFSETTINGS=/default -dNOPAUSE -dQUIET -dBATCH -dDetectDuplicateImages -dCompressFonts=true -r150 -sOutputFile="+output_pdf_name
##pdfs = []
#for s in stations:
    #pdf_i='station-' + s + '.pdf'
    ##pdfs.append(pdf_i)
    #make_pdf=make_pdf+" "+pdf_i+" "
#os.system(make_pdf)
#for pdf in pdfs:
    #os.remove(pdf)

#transfer = "curl --upload-file ./"+output_pdf_name+" https://transfer.sh/"+output_pdf_name
#os.system(transfer)
#print

##for pdf in pdfs:
    ##merged.append(pdf)

##merged.write('delays.pdf')

##for pdf in pdfs:
    ##print(pdf)
    ##os.remove(pdf)

